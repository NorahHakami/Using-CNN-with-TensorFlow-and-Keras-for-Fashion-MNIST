# -*- coding: utf-8 -*-
"""fashion_mnist.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17jmkqDwCRZIgvSy74ZkFtZdK_Obnp5sM
"""

import numpy as np
import matplotlib.pyplot as plt

from keras.datasets import fashion_mnist
from keras.models import Sequential
from keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPooling2D
from keras import utils

(x_train, y_train), (x_test, y_test) = fashion_mnist.load_data()

print(x_train.shape, x_test.shape)

x_train = x_train.reshape((x_train.shape[0], 28, 28, 1)).astype('float32') / 255
x_test = x_test.reshape((x_test.shape[0], 28, 28, 1)).astype('float32') / 255

input_shape = (28, 28, 1)

x_test.shape

# one-hot encoding using keras' numpy-related utilities
n_classes = 10
y_train = utils.to_categorical(y_train, n_classes)
y_test = utils.to_categorical(y_test, n_classes)

print('x_train shape:', x_train.shape)
print(x_train.shape[0], 'train samples')
print(x_test.shape[0], 'test samples')

print('x_train shape:', x_train.shape)
print(x_train.shape[0], 'train samples')
print(x_test.shape[0], 'test samples')

model = Sequential()
# Convolutional layers
model.add(Conv2D(96, (7, 7), strides=(2, 2), activation='relu', input_shape=(28, 28, 1)))
model.add(MaxPooling2D((3, 3), strides=(2, 2)))


model.add(Conv2D(256, (5, 5), activation='relu', padding='same'))
model.add(MaxPooling2D((2, 2), strides=(2, 2)))


model.add(Conv2D(384, (3, 3), activation='relu', padding='same'))
model.add(Conv2D(384, (3, 3), activation='relu', padding='same'))
model.add(Conv2D(256, (3, 3), activation='relu', padding='same'))
model.add(MaxPooling2D((2, 2), strides=(2, 2)))


# Fully connected layers
model.add(Flatten())
model.add(Dense(4096, activation='relu'))
model.add(Dense(4096, activation='relu'))
model.add(Dense(10, activation='softmax'))

# looking at the model summary
model.summary()

from tensorflow.keras.callbacks import LearningRateScheduler
import math

def scheduler(epoch, lr):
    return lr * math.exp(-0.1)

lr_scheduler = LearningRateScheduler(scheduler)

model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])
model.fit(x_train, y_train, batch_size=128 , epochs=20 , callbacks=[lr_scheduler])

score = model.evaluate(x_test, y_test, verbose=0)
print('Test loss:', score[0])
print('Test accuracy:', score[1])

predictions = model.predict(x_test)

plt.imshow(x_test[9].reshape((28,28)),cmap="gray")
plt.show()

p = [np.argmax(i) for i in predictions]

# 0 T-shirt/top
# 1 Trouser
# 2 Pullover
# 3 Dress
# 4 Coat
# 5 Sandal
# 6 Shirt
# 7 Sneaker
# 8 Bag
# 9 Ankle boot
print(p[9])

model.save('mnist.h5')
print("Saving the model as mnist.h5")